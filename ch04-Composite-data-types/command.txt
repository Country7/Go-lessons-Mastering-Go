Использование составных типов данных 

----------------------------------------------------------
Структуры    sortSlice.go   structures.go

    type aStructure struct {
        person string
        height int
        weight int
    }
    var s1 aStructure
    s1.person
    p1 := aStructure{"fmt", 12, -2}  // определение литерала структуры
    p1 := aStructure{weight: 12, height: -2}   // другая форма определения литерала структуры

!!! если присвоить структуру элементу массива, эта структура
    копируется в массив, поэтому изменение значения исходной структуры
    не повлияет на объекты массива

    $ go run structures.go
    0 0
    {23 12 -2}
    {0 13 12}
    [{0 13 12} {0 0 0} {23 12 -2} {0 0 0}]
    [{0 13 12} {0 0 0} {23 12 -2} {0 0 0}]


----------------------------------------------------------
Указатели на структуры    pointerStruct.go

    $ go run pointerStruct.go
    Mihalis
    Mihalis
    Mihalis
    &{Mihalis Tsoukalos 123}
    {Mihalis Tsoukalos 123}

----------------------------------------------------------
Ключевое слово new

!!! new возвращает адрес памяти выделенного объекта. 
    Проще говоря, new возвращает указатель

    pS := new(aStructure)

!!! Основное различие между new и make состоит в том, что переменные,
    созданные с помощью make, правильно инициализируются, а не только
    обнуляется выделенная для них память. Кроме того, make можно при-
    менять только к хеш-таблицам, каналам и срезам, и эта функция не
    возвращает адрес памяти, то есть make не возвращает указатель

sP := new([]aStructure)  // создается срез, указывающий на nil
*sP = make([]aStructure, 10) // Чтобы использовать переменную sP, 
                                нужно инициализировать срез


----------------------------------------------------------
Кортежи   tuples.go

кортеж — это конечный упорядоченный список, состоящий из нескольких частей

!!! Go не поддерживает тип кортежа
    но поддерживает определенные способы использования кортежей

    $ go run tuples.go
    20 100 -10
    40 400 -20
    400 40 -20
    800 160000 -400





