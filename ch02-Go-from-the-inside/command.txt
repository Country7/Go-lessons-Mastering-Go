 Go изнутри

----------------------------------------------------------
Компилятор Go  unsafe.go

    $ go tool compile unsafe.go
    $ ls -l unsafe.o
    -rw-r--r--  1 mtsouk  staff  6926 Jan 22 21:39 unsafe.o
    $ file unsafe.o
    unsafe.o: current ar archive

    $ go tool compile -pack unsafe.go
    $ ls -l unsafe.a
    -rw-r--r--  1 mtsouk  staff  6926 Jan 22 21:40 unsafe.a
    $ file unsafe.a
    unsafe.a: current ar archive

    $ go tool compile -S unsafe.go

----------------------------------------------------------
Сборка мусора  (Garbage Collection, GC)  gColl.go

    $ go run gColl.go
    mem.Alloc: 124168
    mem.TotalAlloc: 124168
    mem.HeapAlloc: 124168
    mem.NumGC: 0
    -----
    mem.Alloc: 50137432
    mem.TotalAlloc: 500176208
    mem.HeapAlloc: 50137432
    mem.NumGC: 9
    -----
    mem.Alloc: 133568
    mem.TotalAlloc: 1500257264
    mem.HeapAlloc: 133568
    mem.NumGC: 20
    -----

еще более по- дробный отчет о том, как работает сборщик мусора Go
    $ GODEBUG=gctrace=1 go run gColl.go

Трехцветный алгоритм
Хеш-таблицы, срезы и сборщик мусора Go
    sliceGC.go  Использование срезов
    mapStar.go  Использование хеш-таблиц с указателями
    mapNoStar.go  Использование хеш-таблиц без указателей
    mapSplit.go  Разделение хеш-таблицы

Сравнение производительности описанных методик
    $ time go run sliceGC.go
    go run sliceGC.go  0,50s user 0,47s system 98% cpu 0,982 total
    $ time go run mapStar.go
    go run mapStar.go  10,56s user 0,70s system 138% cpu 8,130 total
    $ time go run mapNoStar.go
    go run mapNoStar.go  5,14s user 0,31s system 97% cpu 5,582 total
    $ time go run mapSplit.go
    go run mapSplit.go  5,02s user 0,25s system 98% cpu 5,368 total


----------------------------------------------------------
Небезопасный код  Пакет unsafe  unsafe.go

    $ go run unsafe.go
    *p1:  5
    *p2:  5
    5434123412312431212
    *p2:  -930866580
    54341234
    *p2:  54341234

moreUnsafe.go получает доступ ко всем элементам массива с помощью указателей
    $ go run moreUnsafe.go
    0 1 -2 3 4 
    One more: 1374390619880 


----------------------------------------------------------
Вызов C-кода из Go

Вызов C-кода из Go в одном файле  cGo.go
    $ go run cGo.go
    A Go statement!
    Calling C code!
    Another Go statement!

Вызов из Go C-кода в отдельных файлах
C-код примера в двух файлах: callC.h и callC.c в отдельном каталоге callClib

!!! нужно скомпилировать C-код, чтобы создать библиотеку
    $ ls -l callClib/
    total 16
    -rwxr-xr-x  1 country  staff  162  4 июн 18:05 callC.c
    -rwxr-xr-x  1 country  staff   89  4 июн 18:05 callC.h
    $ gcc -c callClib/*.c
    $ ls -l callC.o
    -rw-r--r--  1 country  staff  912  4 июн 18:14 callC.o
    $ file callC.o 
    callC.o: Mach-O 64-bit object arm64
    $ /usr/bin/ar rs callC.a *.o 
    ar: creating archive callC.a
    $ ls -l callC.a 
    -rw-r--r--  1 country  staff  1120  4 июн 18:16 callC.a
    $ file callC.a
    callC.a: current ar archive random library
    $ rm callC.o

Теперь компилируем файл с Go-кодом
    $ go build callC.go
    $ ls -l callC
    -rwxr-xr-x  1 country  staff  2077906  4 июн 18:21 callC
    $ file callC
    callC: Mach-O 64-bit executable arm64

Запускаем исполняемый файл callC
    $ ./callC
    Going to call a C function!
    Hello from C!
    Going to call another C function!
    Go send me This is Mihalis!
    All perfectly done!

----------------------------------------------------------
Вызов Go-функций из C-кода  usedByC.go
Go-пакет  
Именем Go-пакета должно быть main, но имя файла может быть любым - ByC.go

сгенерировать из Go-кода общую библиотеку C
    $ go build -o usedByC.o -buildmode=c-shared usedByC.go
    $ ls -l usedByC.*
    -rwxr-xr-x  1 country  staff      204  4 июн 18:30 usedByC.go
    -rw-r--r--  1 country  staff     1715  4 июн 18:33 usedByC.h
    -rw-r--r--  1 country  staff  2060370  4 июн 18:33 usedByC.o
    $ file usedByC.o
    usedByC.o: Mach-O 64-bit dynamically linked shared library arm64

компиляция C-кода, кот. содержится в исходном файле willUseGo.c
    $ gcc -o willUseGo willUseGo.c ./usedByC.o
    $ ./willUseGo
    About to call a Go function!
    A Go function!
    Product: 276
    It worked!


----------------------------------------------------------
Ключевое слово defer   defer.go
    $ go run defer.go
    1 2 3 
    0 0 0 
    1 2 3 

Использование defer для журналирования   logDefer.go
    $ go run logDefer.go
    $ cat /tmp/mGo.log


----------------------------------------------------------
Функции panic() и recover()   panicRecover.go
    $ go run panicRecover.go
    Inside a()
    About to call b()
    Inside b()
    Recover inside a()!
    main() ended!

Самостоятельное использование функции panic()   justPanic.go
    $ go run justPanic.go


----------------------------------------------------------
Две полезные UNIX-утилиты   strace(1) и dtrace(1)
    strace только для Linux
    $ strace ls
    $ strace find /usr 2>&1 | grep ioctl
    $ strace -c find /usr 1>/dev/null

    $ sudo dtruss godoc
    $ sudo dtruss -c go run unsafe.go 2>&1


----------------------------------------------------------
Среда Go   goEnv.go   requiredVersion.go
    $ go run goEnv.go
    You are using gc on a arm64 machine
    Using Go version go1.20.4
    Number of CPUs: 10
    Number of Goroutines: 1

    $ go run requiredVersion.go
    You are using Go version 1.8 or higher!

Команда go env
    $ go env


----------------------------------------------------------
Go-ассемблер
    $ GOOS=darwin GOARCH=arm64 go tool compile -S goEnv.go
аналог
    $ GOOS=darwin GOARCH=arm64 go build -gcflags -S goEnv.go


----------------------------------------------------------
Узловые деревья

стр. 106







