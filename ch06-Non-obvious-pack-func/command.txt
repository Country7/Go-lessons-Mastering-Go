Неочевидные знания о пакетах и функциях Go

----------------------------------------------------------
Что такое Go-пакеты    aPackage.go

    Go-пакет — это файл с исходным кодом Go, который начинается 
    с ключевого слова package, после него стоит имя пакета

    $ go run aPackage.go
    go run: cannot run non-main package

----------------------------------------------------------
Что такое функции Go

Анонимные функции  (замыкания)    functions.go

    square := func(s int) int {
        return s * s
    }
    fmt.Println("The square of", y, "is", square(y))

Функции, которые возвращают несколько значений   functions.go

    func aFunction() (int, int, float64, string) {
    }

Функции, возвращающие именованные значения   returnNames.go

    func namedMinMax(x, y int) (min, max int) {
        if x > y {
            min = y
            max = x
        } else {
            min = x
            max = y
        }
        return
    }

Функции, принимающие указатели   ptrFun.go

    func getPtr(v *float64) float64 {
        return *v * *v
    }
        x := 12.2
        fmt.Println(getPtr(&x))

Функции, которые возвращают указатели   returnPtr.go

    func returnPtr(x int) *int {
        y := x * x
        return &y
    }
        sq := returnPtr(10)
        fmt.Println("sq value:", *sq)
        fmt.Println("sq memory address:", sq)

Функции, которые возвращают другие функции   returnFunction.go

    func funReturnFun() func() int {
        i := 0
        return func() int {
            i++
            return i * i
        }
    }
        i := funReturnFun()
        j := funReturnFun()
    i и j - разные функции

Функции, которые принимают другие функции в качестве параметров   funFun.go

    func funFun(f func(int) int, v int) int {
        return f(v)
    }
        funFun(function1, 123)
        funFun(func(i int) int {return i * i * i}, 123)

Функции с переменным числом параметров    variadic.go

    func varFunc(input ...string) {
        fmt.Println(input)
    }

    оператор ...Type, называется оператором упаковки


----------------------------------------------------------
----------------------------------------------------------
Разработка Go-пакетов    aPackage.go  useAPackage.go

    Может потребоваться удаление и установка Go
    Удалить старую версию Go:
    $ sudo apt-get remove golang-go
    $ sudo apt-get remove --auto-remove golang-go
    проверяем:
    $ which go
    Скачиваем последнюю версию: https://go.dev/dl/
    Распаковываем:
    $ sudo tar -C /usr/local -xvzf /home/country/Загрузки/go1.21.4.linux-amd64.tar.gz
    Настраиваем рабочее пространство Go:
    $ mkdir -p ~/go/{bin,src,pkg}
    в файле /etc/profile добавляем строки:
    export GOROOT=/usr/local/go
    export PATH=$PATH:$GOROOT/bin
    в файле /home/country/.profile добавляем строки:
    export GOPATH="$HOME/go"
    export GOBIN="$GOPATH/bin"
    export GOROOT=/usr/local/go
    export PATH=$PATH:$GOROOT/bin
    вносим изменения в профиль пользователя:
    $ source /home/country/.profile
    проверяем:
    $ go version
    $ go env

    Если запустим программу просто так, то получим ошибку:
    $ go run useAPackage.go
    useAPackage.go:4:2: package aPackage is not in std (/usr/local/go/src/aPackage)

    Чтобы установить разработанный пакет, необходимо 
    выполнить следующие команды:

    По книге вот так, но реально не работает:
    $ mkdir ~/go/src/aPackage
    $ cp aPackage.go ~/go/src/aPackage/
    $ go install aPackage
    $ cd ~/go/pkg/darwin_amd64/
    $ ls -l aPackage.a
    -rw-r--r-- 1 mtsouk staff 4980 Dec 22 06:12 aPackage.a

    $ go run useAPackage.go
    Using aPackage!
    This is function A!
    privateConstant: 21
    123

Компиляция Go-пакета

    $ go tool compile aPackage.go
    $ ls -l aPackage.*
    -rw-r--r--@ 1 mtsouk staff 201 Jan 10 22:08 aPackage.go
    -rw-r--r-- 1 mtsouk staff 16316 Mar 4 20:01 aPackage.o


----------------------------------------------------------
Закрытые переменные и функции

    функции, переменные, типы и т. д., имена которых 
    начинаются с заглавной буквы, являются открытыми.
    А функции, переменные, типы и т. д., имена которых 
    начинаются со строчной буквы, являются закрытыми.

----------------------------------------------------------
Функция init()
    автоматически выполняется в начале выполнения пакета


----------------------------------------------------------
Go-модули
Создание и использование Go-модулей
Создание версии v1.0.0

    $ go mod init
    $ touch myModule.go
    $ vi myModule.go
    $ git add .
    $ git commit -a -m "Initial version 1.0.0"
    $ git push
    $ git tag v1.0.0
    $ git push -q origin v1.0.0
    $ go list
    github.com/mactsouk/myModule
    $ go list -m
    github.com/mactsouk/myModule

    $ cat go.mod

Использование версии v1.0.0

    $ export GO111MODULE=on
    $ go run useModule.go
    $ go mod init hello
    $ go build

Создание версии v1.1.0

    $ vi myModule.go
    $ git commit -a -m "v1.1.0"
    $ git push
    $ git tag v1.1.0
    $ git push -q origin v1.1.0

Использование версии v1.1.0

    $ docker run --rm -it golang:latest
    ...

Использование двух версий одного и того же Go-модуля
    package main
    import (
        v1 "github.com/mactsouk/myModule"
        v2 "github.com/mactsouk/myModule/v2"
    )
    func main() {
        v1.Version()
        v2.Version()
    }

    $ export GO111MODULE=on
    $ go run useTwo.go

Где хранятся Go-модули
    MacOS Mojave содержимое каталога ~/go/pkg/mod/github.com/mactsouk

Команда go mod vendor
    хранить все зависимости в одном месте, рядом с файлами проекта

    $ cd useTwoVersions
    $ go mod init useV1V2
        go: creating new go.mod: module useV1V2
    $ go mod vendor
    $ ls -l
    $ ls -l vendor/github.com/mactsouk/myModule
    $ ls -l vendor/github.com/mactsouk/myModule/v2

    Главное здесь — выполнение команды go mod init <имя пакета> перед командой go mod vendor

Как писать хорошие Go-пакеты
    ...

----------------------------------------------------------
----------------------------------------------------------
Пакет syscall   useSyscall.go

    pid, _, _ := syscall.Syscall(39, 0, 0, 0)
    fmt.Println("My pid is", pid)
    uid, _, _ := syscall.Syscall(24, 0, 0, 0)
    fmt.Println("User ID:", uid)

    message := []byte{'H', 'e', 'l', 'l', 'o', '!', '\n'}
    fd := 1
    syscall.Write(fd, message)

    command := "/bin/ls"
    env := os.Environ()
    syscall.Exec(command, []string{"ls", "-a", "-x"}, env)

Как на самом деле работает fmt.Println()
    ...


----------------------------------------------------------
----------------------------------------------------------
Пакеты go/scanner, go/parser и go/token

    Синтаксический анализ языка выполняется в два этапа. Первый из них заклю-
    чается в разбиении входных данных на лексемы (лексический анализ), а второй —
    в передаче этих лексем синтаксическому анализатору, чтобы убедиться, что эти
    лексемы имеют смысл и находятся в правильном порядке (семантический анализ),
    ведь, если произвольно сочетать английские слова, не всегда получится правильное
    предложение.


Пакет go/ast
    Абстрактное синтаксическое дерево (Abstract Syntax Tree, AST) — структури-
    рованное представление исходного кода программы Go

Пакет go/scanner    goScanner.go
    Сканер — это то, что читает программу, написанную на языке программирования,
    и генерирует лексемы. В данном случае это код Go, который читает программу,
    созданную на языке Go

    $ go build goScanner.go 
    $ ./goScanner a.go 

Пакет go/parser   goParser.go
    Синтаксический анализатор получает результаты работы сканера (лексемы)
    и синтезирует из них структуру. Используя грамматику, которая описывает язык
    программирования, синтаксический анализатор проверяет, образуют ли получен-
    ные лексемы допустимую программу.

    $ go build goParser.go
    $ ./goParser a.go

Практический пример    varTimes.go
    $ go build varTimes.go
    $ ./varTimes varTimes.go variadic.go a.go

Поиск имен переменных заданной длины   varSize.go
    $ go build varSize.go
    $ ./varSize
        Not enough arguments!
    $ ./varSize 2 varSize.go variadic.go
    $ ./varSize 3 varSize.go variadic.go
    $ ./varSize 7 varSize.go variadic.go


----------------------------------------------------------
----------------------------------------------------------
Шаблоны для текста и HTML     text/template и html/template
    Если импортировать одновременно и text/template, и html/template, то 
    следует присвоить одному из них псевдоним

Вывод простого текста   textT.go   text.gotext
    $ go run textT.go text.gotext

    Ключевое слово range позволяет перебрать строки
    переменные и динамический текст должны заключаться в двойные фигурные скобки: {{ … }}
    Поля структуры доступны под именами .Number и .Square
    Выполнение команды {{ range }} заканчивается командой {{ end }}
    пустые строки в файлах текстовых шаблонов имеют большое значение и будут
    отражаться при итоговом выводе

Вывод текста в формате HTML   htmlT.go   html.gohtml

    $ go mod init useV1V2
    $ go get github.com/mattn/go-sqlite3
    $ go run htmlT.go htmlT.db html.gohtml
    в браузере localhost:8080






стр. 330


