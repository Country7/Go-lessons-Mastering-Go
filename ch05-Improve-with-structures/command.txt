Как улучшить код Go с помощью структур данных

----------------------------------------------------------
О графах и узлах

    Граф (G (V, E)) — это конечное непустое множество вершин (или узлов) V и множество ребер E
    Циклический граф — это граф, в котором все или некоторые вершины образуют замкнутый контур
    В ациклических графах замкнутых контуров нет
    Направленный граф — это граф, с ребрами которого связано некое направление
    Направленный ациклический граф — это направленный граф без замкнутых контуров

----------------------------------------------------------
Сложность алгоритма

    Лучший алгоритм со сложностью O(n)
    Худший - O(n!) - практически непригодным для случаев, когда объем
                     входных данных насчитывает более чем 300 элементов
    Операции поиска для встроенных типов - O(1) - работают быстрее


----------------------------------------------------------
----------------------------------------------------------
Двоичные деревья в Go

    Двоичное дерево — это структура данных, в которой под каждым узлом распо-
    лагается не более двух других узлов

    Корень дерева
    Глубина дерева
    Высота дерева
    Глубина узла
    Лист
    Сбалансированное дерево
    Несбалансированное дерево

Реализация двоичного дерева в Go     binTree.go

    type Tree struct {
        Left    *Tree
        Value   int
        Right   *Tree
    }

Преимущества двоичных деревьев:
    Высота сбалансированного дерева из 1 000 000 элементов — около 20,
    можем достичь любого узла дерева из 1 000 000 узлов менее чем за 20 шагов!

Недостатки двоичных деревьев:
    Если у дерева длинные и сложные ключи, то вставка или поиск элемента могут о
    казаться медленными из-за большого количества требуемых операций сравнения. 
    Наконец, если дерево не сбалансировано, то скорость выполняемых в нем операций 
    будет непредсказуемой


----------------------------------------------------------
----------------------------------------------------------
Пользовательские хеш-таблицы в Go    hashTable.go 

    type Node struct {
        Value int
        Next *Node
    }  - определение узла пользовательской хеш-таблицы

    type HashTable struct {
        Table map[int]*Node
        Size int
    }

Стр. 224



