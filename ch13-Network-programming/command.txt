Сетевое программирование: создание серверов и клиентов

----------------------------------------------------------
----------------------------------------------------------
Работа с HTTPS-трафиком

----------------------------------------------------------
Создание сертификатов

    создать сертификат для сервера на macOS:
    $ openssl genrsa -out server.key 2048
    $ openssl ecparam -genkey -name secp384r1 -out server.key
    $ openssl req -new -x509 -sha256 -key server.key -out server.crt -days 3650

    создать сертификат для клиента на macOS:
    $ openssl req -x509 -nodes -newkey rsa:2048 -keyout client.key -out client.crt -days 3650 -subj "/"

    если сертификат является самозаверяющим, как тот, который мы только 
    что создали, для работы HTTPS-клиента нужно использовать
    параметр InsecureSkipVerify: true в структуре http.Transport 

----------------------------------------------------------
HTTPS-клиент    httpsClient.go

    протокол защиты информации Secure Sockets Layer (SSL)

    пакет crypto/tls  - протокол безопасности на ТРАНСПОРТНОМ уровне 
    (Transport Layer Security, TLS)

	tr := &http.Transport{
		TLSClientConfig: &tls.Config{},
	}
	client := &http.Client{Transport: tr}
	response, err := client.Get(URL)
	defer response.Body.Close()
	content, _ := ioutil.ReadAll(response.Body)
	s := strings.TrimSpace(string(content))

    $ go run httpsClient.go https://www.google.com

----------------------------------------------------------
Простой HTTPS-сервер    https.go

    func Default(w http.ResponseWriter, req *http.Request) {
        fmt.Fprintf(w, "This is an example HTTPS server!\n")
    }
	http.HandleFunc("/", Default)
	err := http.ListenAndServeTLS(PORT, "server.crt", "server.key", nil)

    $ go run https.go
    $ go run httpsClient.go https://localhost:1443
        Get "https://localhost:1443": tls: failed to verify certificate: x509: 
        “Internet Widgits Pty Ltd” certificate is not standards compliant

    HTTPS-сервер, разработанный в этом разделе, использует HTTPS через SSL,
    а это не самый безопасный вариант. Лучше использовать TLS — в следующем
    подразделе рассмотрена реализация на Go HTTPS-сервера, использующего TLS

----------------------------------------------------------
Разработка TLS-сервера и TLS-клиента    TLSserver.go  httpsClient.go  TLSclient.go

    type handler struct {}
    func (h *handler) ServeHTTP(w http.ResponseWriter, req *http.Request) {
        w.Write([]byte("Hello world!\n"))
    }

	caCert, err := ioutil.ReadFile("client.crt")
	caCertPool := x509.NewCertPool()
	caCertPool.AppendCertsFromPEM(caCert)
	cfg := &tls.Config{
		ClientAuth: tls.RequireAndVerifyClientCert,
		ClientCAs:  caCertPool,
	}
	srv := &http.Server{
		Addr:      PORT,
		Handler:   &handler{},
		TLSConfig: cfg,
	}
	fmt.Println(srv.ListenAndServeTLS("server.crt", "server.key"))

    $ go run httpsClient.go https://localhost:1443
        Get "https://localhost:1443": tls: failed to verify certificate: x509: 
        “Internet Widgits Pty Ltd” certificate is not standards complian

    $ go run TLSserver.go
        Listening to port number :1443
        2024/02/18 18:31:33 http: TLS handshake error from [::1]:49354: remote error: tls: bad certificate


    для того чтобы HTTPS-клиент httpsClient.go успешно взаимодействовал
    с TLSserver.go, который использует самозаверенный сертификат,
    необходимо добавить в структуру http.Transport параметр 
    InsecureSkipVerify: true. Версия httpsClient.go, которая работает с 
    TLSserver.go и содержит InsecureSkipVerify: true, сохранена в файле TLSclient.go

	caCert, err := ioutil.ReadFile("server.crt")
	caCertPool := x509.NewCertPool()
	caCertPool.AppendCertsFromPEM(caCert)
	cert, err := tls.LoadX509KeyPair("client.crt", "client.key")

	client := &http.Client{
		Transport: &http.Transport{
			TLSClientConfig: &tls.Config{
				RootCAs:            caCertPool,
				InsecureSkipVerify: true,
				Certificates:       []tls.Certificate{cert},
			},
		},
	}
	resp, err := client.Get(URL)
	htmlData, err := ioutil.ReadAll(resp.Body)
	defer resp.Body.Close()
	fmt.Printf("%v\n", resp.Status)
	fmt.Printf(string(htmlData))

    Здесь показано использование InsecureSkipVerify

    подключить TLSclient.go к TLSserver.go
    $ go run TLSclient.go https://localhost:1443
        200 OK
        Hello world!

    подключить TLSclient.go к https.go - тоже зачет
    $ go run TLSclient.go https://localhost:1443  
        200 OK
        This is an example HTTPS server!


----------------------------------------------------------
----------------------------------------------------------
Стандартный Go-пакет net

    TCP- или UDP-клиент либо сервер, необходим пакет net
    для подключения к сети функция net.Dial(), 
    для сервера — функция net.Listen()
    net.Dial(), и net.Listen() — возвращают значение типа net.Conn
    этот тип реализует интерфейсы io.Reader и io.Writer

----------------------------------------------------------
----------------------------------------------------------
TCP-клиент    TCPclient.go

    CONNECT := arguments[1]
	c, err := net.Dial("tcp", CONNECT)

    Допустимые значения для первого параметра — tcp, tcp4 (только для IPv4), 
    tcp6 (только для IPv6), udp, udp4 (только для IPv4), udp6 (только для IPv6), 
    ip, ip4 (только для IPv4), ip6 (только для IPv6), unix (UNIX-сокеты), 
    unixgram и unixpacket

	for {
		reader := bufio.NewReader(os.Stdin)
		fmt.Print(">> ")
		text, _ := reader.ReadString('\n')
		fmt.Fprintf(c, text+"\n")

		message, _ := bufio.NewReader(c).ReadString('\n')
		fmt.Print("->: " + message)
		if strings.TrimSpace(string(text)) == "STOP" {
			fmt.Println("TCP client exiting...")
			return
		}
	}

    протестируем TCPclient.go TCP-сервером с использованием netcat(1)

    $ nc -l 127.0.0.1 8001
        Hello from TCPclient.go!
        Hi from nc!
        STOP
        STOP

    $ go run TCPclient.go localhost:8001
        >> Hello from TCPclient.go!
        ->: Hi from nc!
        >> STOP
        ->: STOP
        TCP client exiting...

----------------------------------------------------------
Другая версия TCP-клиента    otherTCPclient.go

	CONNECT := arguments[1]
	tcpAddr, err := net.ResolveTCPAddr("tcp4", CONNECT)

    Функция net.ResolveTCPAddr() возвращает адрес конечной точки TCP (тип TCPAddr) и 
    может использоваться только для сетей TCP

	conn, err := net.DialTCP("tcp4", nil, tcpAddr)

    Функция net.DialTCP() эквивалентна функции net.Dial(), только для сетей TCP

	for {
		reader := bufio.NewReader(os.Stdin)
		fmt.Print(">> ")
		text, _ := reader.ReadString('\n')
		fmt.Fprintf(conn, text+"\n")

		message, _ := bufio.NewReader(conn).ReadString('\n')
		fmt.Print("->: " + message)
		if strings.TrimSpace(string(text)) == "STOP" {
			fmt.Println("TCP client exiting...")
			conn.Close()
			return
		}
	}

    $ nc -l 127.0.0.1 8001
        Hello from otherTCPclient.go!
        Hi from netcat!
        STOP
        STOP

    $ go run otherTCPclient.go localhost:8001
        >> Hello from otherTCPclient.go!
        ->: Hi from netcat!
        >> STOP
        ->: STOP
        TCP client exiting...


----------------------------------------------------------
----------------------------------------------------------
TCP-сервер    TCPserver.go

	PORT := ":" + arguments[1]
	l, err := net.Listen("tcp", PORT)
	defer l.Close()

    Функция net.Listen() прослушивает соединения. 
    Если ее второй аргумент не содержит IP-адрес, а только номер порта, 
    то net.Listen() будет прослушивать все доступные IP-адреса локального компьютера

	c, err := l.Accept()

    Функция Accept() ожидает следующего соединения и возвращает порождающую переменную Conn

	for {
		netData, err := bufio.NewReader(c).ReadString('\n')
		if strings.TrimSpace(string(netData)) == "STOP" {
			fmt.Println("Exiting TCP server!")
			return
		}
		fmt.Print("-> ", string(netData))
		t := time.Now()
		myTime := t.Format(time.RFC3339) + "\n"
		c.Write([]byte(myTime))
	}

    $ go run TCPserver.go 8001
        -> HELLO
        Exiting TCP server!

    $ nc 127.0.0.1 8001
        HELLO
        2024-02-18T19:35:10+03:00
        STOP

----------------------------------------------------------
Другая версия TCP-сервера    otherTCPserver.go

    этот TCP-сервер реализует сервис Echo, который просто возвращает
    клиенту те же данные, которые были отправлены им

	SERVER := "localhost" + ":" + arguments[1]
	s, err := net.ResolveTCPAddr("tcp", SERVER)
	l, err := net.ListenTCP("tcp", s)

    Функция net.ListenTCP() — это эквивалент функции net.Listen() для сетей TCP

	buffer := make([]byte, 1024)
	conn, err := l.Accept()
	for {
		n, err := conn.Read(buffer)
		if strings.TrimSpace(string(buffer[0:n])) == "STOP" {
			fmt.Println("Exiting TCP server!")
			conn.Close()
			return
		}
		fmt.Print("> ", string(buffer[0:n-1]))
		_, err = conn.Write(buffer)
	}

    $ go run otherTCPserver.go 8001
        > Hello!
        > Hi!
        Exiting TCP server!

    $ go run otherTCPclient.go localhost:8001
        >> Hello!
        ->: Hello!
        >> Hi!
        ->: Hi!
        >> STOP
        ->: TCP client exiting...

    чтобы узнать, какой процесс использует TCP-порт с номером 8001, 
    нужно выполнить следующую команду:

    $ sudo lsof -n -i :8001


----------------------------------------------------------
----------------------------------------------------------
UDP-клиент    UDPclient.go

    Главное различие между протоколами UDP и TCP состоит в том, что про-
    токол UDP ненадежен. Это также означает, что в целом UDP проще, чем
    TCP, поскольку UDP не должен сохранять состояние UDP-соединения.
    Другими словами, работа UDP похожа на самонаводящуюся ракету, что
    в некоторых случаях идеально подходит

	CONNECT := arguments[1]
	s, err := net.ResolveUDPAddr("udp4", CONNECT)
	c, err := net.DialUDP("udp4", nil, s)
	fmt.Printf("The UDP server is %s\n", c.RemoteAddr().String())
	defer c.Close()

    Функция net.ResolveUDPAddr() возвращает адрес конечной точки UDP, который 
    определяется ее вторым параметром. Первый параметр (udp4) указывает на
    то, что программа поддерживает только протокол IPv4.
    Использованная здесь функция net.DialUDP() представляет собой аналог
    net.Dial() для сетей UDP

	for {
		reader := bufio.NewReader(os.Stdin)
		fmt.Print(">> ")
		text, _ := reader.ReadString('\n')
		data := []byte(text + "\n")
		_, err = c.Write(data)
		if strings.TrimSpace(string(data)) == "STOP" {
			fmt.Println("Exiting UDP client!")
			return
		}
		buffer := make([]byte, 1024)
		n, _, err := c.ReadFromUDP(buffer)
		fmt.Printf("Reply: %s\n", string(buffer[0:n]))
	}

    $ nc -v -u -l 127.0.0.1 8001   // UDP server
        Hello!
        Hi there!
        STOP

    $ go run UDPclient.go localhost:8001
        The UDP server is 127.0.0.1:8001
        >> Hello!
        Reply: Hi there!
        >> STOP
        Exiting UDP client!


----------------------------------------------------------
----------------------------------------------------------
Разработка UDP-сервера    UDPserver.go

	PORT := ":" + arguments[1]
	s, err := net.ResolveUDPAddr("udp4", PORT)
	connection, err := net.ListenUDP("udp4", s)
	defer connection.Close()
	buffer := make([]byte, 1024)
	rand.Seed(time.Now().Unix())

    Функция net.ListenUDP() — это аналог функции net.ListenTCP() для UDP-сетей

	for {
		n, addr, err := connection.ReadFromUDP(buffer)
		fmt.Print("-> ", string(buffer[0:n-1]))
		if strings.TrimSpace(string(buffer[0:n])) == "STOP" {
			fmt.Println("Exiting UDP server!")
			return
		}
		data := []byte(strconv.Itoa(random(1, 1001)))
		fmt.Printf("data: %s\n", string(data))
		_, err = connection.WriteToUDP(data, addr)
	}

    Функция ReadFromUDP() позволяет считывать данные из UDP-соедине­ ния используя 
    буфер, который, как и следовало ожидать, является байтовым срезом

    $ go run UDPserver.go 8001
        -> Hello!
        data: 567
        -> STOP
        Exiting UDP server!

    $ go run UDPclient.go localhost:8001
        The UDP server is 127.0.0.1:8001
        >> Hello!
        Reply: 567
        >> STOP
        Exiting UDP client!


----------------------------------------------------------
----------------------------------------------------------
Конкурентный TCP-сервер    fiboTCP.go

    Для каждого входящего соединения с TCP-сервером программа будет 
    запускать новую горутину, которая и будет обрабатывать этот запрос.
    Это позволит серверу принимать больше запросов. Следовательно, 
    конкурентный TCP-сервер сможет обслуживать несколько клиентов одновременно.

    func handleConnection(c net.Conn) {
        for {
            netData, err := bufio.NewReader(c).ReadString('\n')
            temp := strings.TrimSpace(string(netData))
            if temp == "STOP" {
                break
            }
            fibo := "-1\n"
            n, err := strconv.Atoi(temp)
            if err == nil {
                fibo = strconv.Itoa(f(n)) + "\n"
            }
            c.Write([]byte(string(fibo)))
        }
        time.Sleep(5 * time.Second)
        c.Close()
    }

	PORT := ":" + arguments[1]
	l, err := net.Listen("tcp4", PORT)
	defer l.Close()

	for {
		c, err := l.Accept()
		if err != nil {
			fmt.Println(err)
			return
		}
		go handleConnection(c)
	}

    $ go run fiboTCP.go 9000               // наш конкурентный сервер

    $ go run TCPclient.go localhost:9000   // 1 клиент
        >> 12
        ->: 144
        >> STOP
        ->: TCP client exiting...

    $ nc localhost 9000                    // 2 клиент
        10
        55
        STOP

    Когда клиент отправляет процессу сервера строку STOP, горутина, которая
    обслуживает этот TCP-клиент, прекращает работу, что приводит к завершению
    соединения.
    Оба клиента обслуживаются одновременно. Проверяем с помощью следующей команды

    $ netstat -anp TCP | grep 9000
        tcp4       0      0  127.0.0.1.9000         127.0.0.1.49464        ESTABLISHED
        tcp4       0      0  127.0.0.1.49464        127.0.0.1.9000         ESTABLISHED
        tcp4       0      0  127.0.0.1.9000         127.0.0.1.49460        ESTABLISHED
        tcp4       0      0  127.0.0.1.49460        127.0.0.1.9000         ESTABLISHED
        tcp4       0      0  *.9000                 *.*                    LISTEN     


----------------------------------------------------------
----------------------------------------------------------
Удобный конкурентный TCP-сервер    kvTCP.go

    type myElement struct {
        Name    string
        Surname string
        Id      string
    }
    var DATA = make(map[string]myElement)
    var DATAFILE = "/tmp/dataFile.gob"

    func handleConnection(c net.Conn) {
        c.Write([]byte("Welcome to the Key Value store!\n"))
        for {
            netData, err := bufio.NewReader(c).ReadString('\n')
            command := strings.TrimSpace(string(netData))
            tokens := strings.Fields(command)
            switch len(tokens) {
            case 0:
                continue
            case 1:
                tokens = append(tokens, "")
                tokens = append(tokens, "")
                tokens = append(tokens, "")
                tokens = append(tokens, "")
            ...
            case 4:
                tokens = append(tokens, "")
            }

            switch tokens[0] {
            case "STOP": ...
            case "PRINT": ...
            case "DELETE": ...
            case "ADD": ...
            case "LOOKUP": ...
            case "CHANGE": ...
            }
        }
    }

    func main() {
        arguments := os.Args
        PORT := ":" + arguments[1]
        l, err := net.Listen("tcp", PORT)
        defer l.Close()
        for {
            c, err := l.Accept()
            go handleConnection(c)
        }
    }

    $ go run kvTCP.go 9000
        Loading /tmp/dataFile.gob
        Empty key/value store!
        open /tmp/dataFile.gob: no such file or directory
        Saving /tmp/dataFile.gob
        remove /tmp/dataFile.gob: no such file or directory
        Saving /tmp/dataFile.gob
        Saving /tmp/dataFile.gob

    $ nc localhost 9000
        Welcome to the Key Value store!
        PRINT
        LOOKUP 1
        Did not find key!
        ADD 1 2 3 4
        Add operation successful!
        LOOKUP 1
        {2 3 4}
        ADD 4 -1 -2 -3
        Add operation successful!
        PRINT
        key: 1 value: {2 3 4}
        key: 4 value: {-1 -2 -3}
        STOP


----------------------------------------------------------
----------------------------------------------------------
Создание образа Docker для TCP/IP-сервера на Go    Docker/Dockerfile  kvTCP.go

    запускаем из приложений Docker

    создаем образ Docker:
    $ docker build -t kvtcp:latest .
        [+] Building 22.2s (10/10) FINISHED

    команда docker images убедиться, что создали желаемый образ Docker:
    $ docker images
        kvtcp    latest    b2868199faae   12 minutes ago   872MB

    Теперь выполним этот образ Docker. Указываем дополнительные параметры для предоставления 
    номера портов, которые мы хотим сделать доступными извне:Последняя команда открывает 
    порт 80 из образа Docker для локального компьютера с помощью порта 5801 локального компьютера
    $ docker run -d -p 5801:80 kvtcp:latest
        7f3e4ce1b2b67c32b078ee57d10260efac70f4e00968cedf7320e354b8cf7b65

    Теперь сможем применить TCP-сервер, расположенный в образе Docker, так:
    $ nc 127.0.0.1 5801
        Welcome to the Key Value store!


    если вы попытаетесь снова назначить порт с номером 80, то получите следующее 
    сообщение об ошибке:
    $ docker run -d -p 5801:80 kvtcp:latest
        709d44be8668284b101d7dfc253938d13e6797d812821838aa5ab18ea48527ec
        docker: Error response from daemon: driver failed programming external
        connectivity on endpoint eager_nobel

    есть возможность обойти это
    ограничение, которую можно проиллюстрировать с помощью следующей команды:
    $ docker run -d -p 5801:80 -p 2000:80 kvtcp:latest
        5cbb17c5bbf720eaa5ce0f1e11cc73dbe5bef3cc925b7936ae1b97e245d54ae8

    создается отображение номера порта 80 из образа Docker на два внешних 
    TCP-порта (5801 и 2000). Здесь работает только один сервер kvTCP и существует 
    только одна копия данных, несмотря на то что эти данные доступны через несколько 
    портов. Можем это проверить с помощью команды docker ps:
    $ docker ps


----------------------------------------------------------
----------------------------------------------------------
Дистанционный вызов процедур    sharedRPC.go

    Remote Procedure Call, RPC — это клиент-серверный механизм для межпроцессного 
    взаимодействия, применяющий протокол TCP/IP. RPC-клиент и RPC-сервер

    $ mkdir -p ~/go/src/sharedRPC               //
    $ cp sharedRPC.go ~/go/src/sharedRPC/       // никак, пути не те, не сработало
    $ go install sharedRPC                      //

    $ sudo mkdir -p /usr/local/go/src/sharedRPC
    $ sudo cp sharedRPC.go /usr/local/go/src/sharedRPC/
    $ go install sharedRPC

----------------------------------------------------------
RPC-клиент    RPCclient.go

    rpc.Dial() вместо net.Dial()

    $ go run RPCclient.go localhost:1234
        dial tcp [::1]:1234: connect: connection refused

----------------------------------------------------------
RPC-сервер    RPCserver.go

    функция rpc.Register() делает эту программу RPC-сервером

    $ go run RPCserver.go
        127.0.0.1:52836

    $ go run RPCclient.go localhost:1234
        Reply (Multiply): -8.000000
        Reply (Power): 0.250000

    rmdir название_папки — удалить пустую папку.
    rm -R название_папки — удалить папку со всем её содержимым.
    $ sudo rm -R /usr/local/go/src/sharedRPC


----------------------------------------------------------
----------------------------------------------------------
Низкоуровневое сетевое программирование   lowLevel.go

    Структура http.Transport дает возможность изменять различные 
    низкоуровневые параметры сетевого соединения

    lowLevel.go перехватывает пакеты интернет-протокола управления 
    сообщениями ICMP (Internet Control Message Protocol), которые используют 
    протокол IPv4, и выводит их содержимое. В целях безопасности для доступа 
    к необработанным сетевым данным необходимы привилегии пользователя root

	netaddr, err := net.ResolveIPAddr("ip4", "127.0.0.1")
	conn, err := net.ListenIP("ip4:icmp", netaddr)
	buffer := make([]byte, 1024)
	n, _, err := conn.ReadFrom(buffer)
	fmt.Printf("% X\n", buffer[0:n])

    Протокол ICMP используется в утилитах ping(1) и traceroute(1)

    $ ping -c 5 localhost
    $ sudo go run lowLevel.go
        00 00 27 F5 E9 0F 00 00 65 DB 11 C0 00 07 8C 55 08 09 0A 0B 0C 0D 0E 0F 10 11 12 13 14 15 16 17 
        18 19 1A 1B 1C 1D 1E 1F 20 21 22 23 24 25 26 27 28 29 2A 2B 2C 2D 2E 2F 30 31 32 33 34 35 36 37

    $ traceroute localhost
    $ sudo go run lowLevel.go
        03 03 15 CB 00 00 00 00 45 00 34 00 90 17 00 00 01 11 
        00 00 7F 00 00 01 7F 00 00 01 90 16 82 9B 00 20 00 00

    апустить lowLevel.go на компьютере с Debian Linux:
    $ uname -a
    # go run lowLevel.go

----------------------------------------------------------
Получение необработанных сетевых данных ICMP    syscallNet.go

    пакет syscall
    syscall.SetsockoptInt()








Стр. 676
