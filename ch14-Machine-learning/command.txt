Машинное обучение на Go

----------------------------------------------------------
Вычисление простых статистических показателей    stats.go  data.txt

    $ go run stats.go data.txt


----------------------------------------------------------
----------------------------------------------------------
Регрессия

----------------------------------------------------------
Линейная регрессия

    y = a x + b

----------------------------------------------------------
Реализация линейной регрессии    regression.go  reg_data.txt

    $ go mod init machine
    $ go get -u gonum.org/v1/gonum/stat

    Функция, которая реализует линейную регрессию, называется stat.LinearRegression()
    b, a := stat.LinearRegression(data.x, data.y, nil, false)

    $ go run regression.go reg_data.txt

----------------------------------------------------------
Вывод данных    plotLR.go  reg_data.txt

    Функция, график которой мы построим, определяется с помощью метода
    plotter.NewFunction()

    $ go get -u gonum.org/v1/plot
    $ go get -u gonum.org/v1/plot/plotter
    $ go get -u gonum.org/v1/plot/vg

    $ go run plotLR.go reg_data.txt                            
        usage: plotLR filename a b
    $ go run plotLR.go reg_data.txt 0.9463 -0.3985             
        <?xml version="1.0"?>
        <!-- Generated by SVGo and Plotinum VG -->
        <svg width="300pt" height="300pt" viewBox="0 0 300 300" ...

    $ go run plotLR.go reg_data.txt 0.9463 -0.3985 > output.svg


----------------------------------------------------------
----------------------------------------------------------
Классификация    classify.go  class_data.txt

    классификация относится к технологиям обучения с учителем (supervised learning)
    метод k ближайших соседей (k-NN)

    knn.NewKnnClassifier() возвращает новый классификатор.

    Fit() сохраняет обучающие данные на тот случай, если вы захотите использовать их позже, 
    Predict() возвращает классификацию входных данных на основе обучающих данных с помощью алгоритма k-NN. 

    evaluation.GetSummary() возвращает таблицу точности, отклик модели, истинные
    положительные, ложные положительные и истинные отрицательные значения
    каждого класса для заданного значения ConfusionMatrix, которое вычислено с 
    помощью функции evaluation.GetConfusionMatrix()

    Поскольку base.InstancesTrainTestSplit() не будет все время возвращать
    одни и те же значения, при каждом выполнении classify.go обучающие
    и тестовые данные будут разными. Следовательно, вы будете получать
    разные результаты.

    $ go get -t -u -v github.com/sjwhitworth/golearn
    
    // $ cd ~/go/src/github.com/sjwhitworth/golearn  - это не сработало
    // $ go get -t -u -v ./...

    $ go get github.com/sjwhitworth/golearn/knn@v0.0.0-20221228163002-74ae077eafb2   // а это сработало

    $ go run classify.go class_data.txt 2
    $ go run classify.go class_data.txt 30

    iris.csv
    $ go run classify.go ~/MyProjects/Go_project/pkg/mod/github.com/sjwhitworth/golearn@v0.0.0-20221228163002-74ae077eafb2/examples/datasets/iris.csv 2
    $ go run classify.go ~/MyProjects/Go_project/pkg/mod/github.com/sjwhitworth/golearn@v0.0.0-20221228163002-74ae077eafb2/examples/datasets/iris.csv 50


----------------------------------------------------------
----------------------------------------------------------
Кластеризация    cluster.go

    Кластеризация — это неконтролируемая (unsupervised, без учителя) версия классификации

    кластеризация методом k-средних

    $ go get -v -u github.com/mash/gokmeans

    $ go run cluster.go 1
    $ go run cluster.go 5
    $ go run cluster.go 8


----------------------------------------------------------
----------------------------------------------------------
Выявление аномалий    anomaly.go

    $ go get -v -u github.com/lytics/anomalyzer

    $ go run anomaly.go 20
    $ go run anomaly.go 100


----------------------------------------------------------
----------------------------------------------------------
Нейронные сети    neural.go

    $ go get github.com/goml/gobrain

    $ go run neural.go


----------------------------------------------------------
----------------------------------------------------------
Анализ выбросов   outlier.go

    $ go run outlier.go data.txt 2
    $ go run outlier.go data.txt 5
    $ go run outlier.go data.txt 0.02


----------------------------------------------------------
----------------------------------------------------------
Работа с TensorFlow    tfVersion.go    tFlow.g

    TensorFlow — известная платформа для машинного обучения

    $ go get github.com/tensorflow/tensorflow/tensorflow/go

    Однако для работы этой команды необходимо предварительно установить
    C-интерфейс для TensorFlow. На компьютере с macOS Mojave это можно сделать
    так:
    $ brew install tensorflow

    $ go test github.com/tensorflow/tensorflow/tensorflow/go

    $ go run tfVersion.go  //  не может найти пакеты

    $ go run tFlow.go 1 20
    $ go run tFlow.go -2 20


----------------------------------------------------------
----------------------------------------------------------
Поговорим о Kafka    writeKafka.go    readKafka.go

    читать записи в формате JSON с помощью Kafka
    Платформа Kafka написана на Scala и Java.

    $ docker pull landoop/fast-data-dev:latest

    $ docker run --rm --name=kafka-box -it -p 2181:2181 -p 3030:3030 -p
        8081:8081 -p 8082:8082 -p 8083:8083 -p 9092:9092 -p 9581:9581 -p 9582:9582
        -p 9583:9583 -p 9584:9584 -e ADV_HOST=127.0.0.1 landoop/fast-data-
        dev:latest

    $ go get -u github.com/segmentio/kafka-go

    $ go run readKafka.go my_topic | head




Стр. 716
