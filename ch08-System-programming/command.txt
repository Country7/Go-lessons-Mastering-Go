Как объяснить UNIX-системе, что она должна делать

----------------------------------------------------------
О процессах в UNIX

    Процесс, Программа
    идентификатором процесса
    пользовательские процессы, процессы-демоны и процессы ядра

    В C - стиль создания новых процессов заключается в системном вызове
    функции fork(). Значение, возвращаемое fork(), позволяет програм-
    мисту различать родительский и дочерний процессы. В Go, наоборот,
    такая функциональность не поддерживается, вместо нее используются
    горутины.

----------------------------------------------------------
----------------------------------------------------------
Пакет flag     

    Для утилит командной строки UNIX, пакет flag будет очень интересен и полезен

простая программа    simpleFlag.go

	minusK := flag.Bool("k", true, "k flag")
	minusO := flag.Int("O", 1, "O")
	flag.Parse()

	valueK := *minusK
	valueO := *minusO
	valueO++
	fmt.Println("-k:", valueK)
	fmt.Println("-O:", valueO)

    $ go run simpleFlag.go -O=100 -k=false
        -k: false
        -O: 101

расширенная программа    funWithFlag.go

    Функция flag.Var() создает флаг любого типа, который соответствует интерфейсу flag.Value
    type Value interface {
        String() string
        Set(string) error
    }

    Прежде всего здесь метод Set() гарантирует, что соответствующему аргументу
    командной строки еще не присвоено значение. Затем этот метод получает входные
    данные и разделяет их на отдельные аргументы с помощью функции strings.Split().
    После этого аргументы сохраняются в поле Names структуры NamesFlag

    Срез flag.Args() содержит оставшиеся аргументы командной строки, а пере-
    менная manyNames — значения аргументов командной строки из flag.Var()

    $ go run funWithFlag.go -names=Mihalis,Jim,Athina 1 two Three
        -k: 0
        -o: Mihalis
        0 Mihalis
        1 Jim
        2 Athina
        Remaining command line arguments:
        0 : 1
        1 : two
        2 : Three


----------------------------------------------------------
----------------------------------------------------------
Пакет viper

    Обратите внимание, что пакет viper способен полностью заменить пакет flag.
    Пакет flag не предоставляет такой функциональности — это позволяет делать 
    стандартный Go-пакет os, однако не так просто, как viper.

Простой пример использования viper     /viper/useViper.go

    $ go mod myviper
    $ go get -u github.com/spf13/viper
        GOMAXPROCS: <nil>
        GOMAXPROCS: 10
        NEW_VARIABLE not defined.

От flag к viper     /viper/flagToViper.go

    flag.Int("i", 100, "i parameter")
	pflag.CommandLine.AddGoFlagSet(flag.CommandLine)
	pflag.Parse()
	viper.BindPFlags(pflag.CommandLine)
	i := viper.GetInt("i")
	fmt.Println(i)

    $ go get -u github.com/spf13/pflag
    $ go run flagToViper.go
    $ go build flagToViper.go
    $ ./flagToViper -i 0
    $ ./flagToViper -i abcd
    $ ./flagToViper -j 200


Чтение конфигурационных файлов в формате JSON   /viper/readJSON.go   myJSONConfig.json

    viper.SetConfigType("json")
	viper.SetConfigFile("./myJSONConfig.json")
	fmt.Printf("Using config: %s\n", viper.ConfigFileUsed())
	viper.ReadInConfig()
	if viper.IsSet("item1.key1") {
		fmt.Println("item1.key1:", viper.Get("item1.key1"))
	} else {
		fmt.Println("item1.key1 not set!")
	}

    $ go run readJSON.go

Чтение конфигурационных файлов в формате YAML   /viper/readYAML.go   myConfig.yaml

    var configFile *string = pflag.String("c", "myConfig", "Setting the configuration file")
	pflag.Parse()
	_, err := os.Stat(*configFile)
	if err == nil {
		fmt.Println("Using User Specified Configuration file!")
		viper.SetConfigFile(*configFile)
	} else {
		viper.SetConfigName(*configFile)
		viper.AddConfigPath("$HOME")
		viper.AddConfigPath(".")
	}
    Этот код проверяет, существует ли файл, указанный в значении флага 
    конфигурации (--c), используя вызов os.Stat()
    иначе предлагаемое по умолчанию (myConfig)

    мы не указываем точно, что хотим использовать конфигурационный файл в формате
    YAML, — программа будет искать все поддерживаемые форматы файлов при условии, 
    что имя файла без расширения — myConfig. Именно так работает viper
	
    err = viper.ReadInConfig()
	if err != nil {
		fmt.Printf("%v\n", err)
		return
	}
	fmt.Printf("Using config: %s\n", viper.ConfigFileUsed())
    Использование viper.ConfigFileUsed() совершенно оправданно, поскольку
    конфигурационный файл не задан жестко, следовательно, нам придется определять
    его самостоятельно

    Чтение и синтаксический анализ YAML-файла выполняются с помощью вызова
    функции viper.ReadInConfig()

	if viper.IsSet("item1.k1") {
		fmt.Println("item1.val1:", viper.Get("item1.k1"))
	} else {
		fmt.Println("item1.k1 not set!")
	}
	if !viper.IsSet("item3.k1") {
		fmt.Println("item3.k1 is not set!")
	}

    $ go build readYAML.go
    $ ./readYAML


----------------------------------------------------------
----------------------------------------------------------
Пакет cobra

    Пакет cobra — очень удобный и популярный Go-пакет, позволяет разрабаты-
    вать утилиты командной строки, имеющие команды, подкоманды и псевдонимы.

Простой пример cobra

    $ go get -u github.com/spf13/cobra@latest
    $ go install github.com/spf13/cobra-cli@latest
    $ $GOBIN/cobra-cli

создадим новый проект cobra:    cli

    $ go mod init cli
    $ $GOBIN/cobra-cli init cli

    $ cd ./cli
    $ $GOBIN/cobra-cli add cmdOne 
    $ $GOBIN/cobra-cli add cmdTwo

    $ go run main.go  (на заработало пока не скопировал сli/cmd в $GOROOT/src/)

    cli/cmd/cmdOne.go
    В следующей строке кода из функции init() определяется новый флаг командной строки:
        cmdOneCmd.Flags().Int("number", 0, "A help for number")
    Этот флаг называется number и используется в блоке cobra.Command следующим образом:
        number, _ := cmd.Flags().GetInt("number")
    Теперь мы можем использовать переменную number любым удобным способом

    $ go run main.go cmdOne
    $ go run main.go cmdOne --number -20
    $ go run main.go cmdTwo
    $ go run main.go cmdThree
    $ go run main.go cmdOne --help

Создание псевдонимов команд:    aliases

    в ./go.mod название модуля поменял на aliases

    $ $GOBIN/cobra-cli init aliases (если $GOBIN добавить в PATH, тогда не нужно постоянно его дописывать) =
    $ cobra-cli init aliases
    $ cd ./aliases
    $ cobra-cli add initialization
    $ cobra-cli add preferences

    Aliases: []string{"initialize", "init"},
    Aliases: []string{"prefer", "pref", "prf"},

    скопировал aliases/cmd в $GOROOT/src/

    $ go run main.go prefer
    $ go run main.go prf
    $ go run main.go init


----------------------------------------------------------
----------------------------------------------------------
Интерфейсы io.Reader и io.Writer

----------------------------------------------------------
Буферизованный и небуферизованный ввод и вывод в файл

----------------------------------------------------------
Пакет bufio
    bufio.Reader и bufio.Writer

----------------------------------------------------------
Чтение текстовых файлов

Построчное чтение текстового файла   byLine.go

    f, err := os.Open(file)
    defer f.Close()
    r := bufio.NewReader(f)
    for {
        line, err := r.ReadString('\n')
        if err == io.EOF {
            break
        } else if err != nil {
            fmt.Printf("error reading file %s", err)
            break
        }
        fmt.Print(line)
    }

    $ go run byLine.go command.txt | wc

Чтение текстового файла по словам    byWord.go

    line, err := r.ReadString('\n')
    r := regexp.MustCompile("[^\\s]+")
    words := r.FindAllString(line, -1)
    for i := 0; i < len(words); i++ {
        fmt.Println(words[i])
    }

    $ go run byWord.go command.txt | wc

Посимвольное чтение текстового файла    byCharacter.go

    line, err := r.ReadString('\n')
    for _, x := range line {
        fmt.Print(string(x) + " ")
    }

    $ go run byCharacter.go command.txt

----------------------------------------------------------
Чтение из /dev/random    devRandom.go

    Нужно импортировать стандартный Go-пакет encoding/binary, поскольку 
    /dev/random предоставляет двоичные данные, которые необходимо декодировать

    f, err := os.Open("/dev/random")
    defer f.Close()
	var seed int64
	binary.Read(f, binary.LittleEndian, &seed)
	fmt.Println("Seed:", seed)

    $ go run devRandom.go

----------------------------------------------------------
Чтение заданного количества данных    readSize.go

    мы создаем байтовый срез нужного размера и используем его для чтения данных

    func readSize(f *os.File, size int) []byte {
        buffer := make([]byte, size)
        n, err := f.Read(buffer)
        if err == io.EOF {
            return nil
        }
        if err != nil {
            fmt.Println(err)
            return nil
        }
        return buffer[0:n]
    }

    $ go run readSize.go 1000 command.txt | wc
    $ wc command.txt


----------------------------------------------------------
Чтение CSV-файлов    CSVplot.go   dataFile

    CSV-файлы — это простые форматированные текстовые файлы

    воспользуемся внешней библиотекой Glot, — она поможет нам построить график 
    по точкам, координаты которых будут прочитаны из CSV-файла. 
    Обратите внимание, что в Glot используется Gnuplot,
    поэтому, чтобы использовать Glot, придется установить библиотеку Gnuplot

    file := os.Args[1]
    _, err := os.Stat(file)  // существует файл или нет

    f, err := os.Open(file)
	defer f.Close()

	reader := csv.NewReader(f)
	reader.FieldsPerRecord = -1
	allRecords, err := reader.ReadAll()

	xP := []float64{}
	yP := []float64{}
	for _, rec := range allRecords {
		x, _ := strconv.ParseFloat(rec[0], 64)
		y, _ := strconv.ParseFloat(rec[1], 64)
		xP = append(xP, x)
		yP = append(yP, y)
	}

	points := [][]float64{}
	points = append(points, xP)
	points = append(points, yP)
	fmt.Println(points)

    $ go mod init csvplot
    $ go get github.com/Arafatk/glot

    $ go run CSVplot.go doesNoExist 
    $ go run CSVplot.go dataFile


----------------------------------------------------------
----------------------------------------------------------
Запись в файл    save.go

	s := []byte("Data to write\n")

	f1, err := os.Create("f1.txt")
	defer f1.Close()
	fmt.Fprintf(f1, string(s))

	f2, err := os.Create("f2.txt")
	defer f2.Close()
	n, err := f2.WriteString(string(s))
	fmt.Printf("wrote %d bytes\n", n)

	f3, err := os.Create("f3.txt")
	w := bufio.NewWriter(f3)
	n, err = w.WriteString(string(s))
	fmt.Printf("wrote %d bytes\n", n)
	w.Flush()

	f4 := "f4.txt"
	err = ioutil.WriteFile(f4, s, 0644)

	f5, err := os.Create("f5.txt")
	n, err = io.WriteString(f5, string(s))
	fmt.Printf("wrote %d bytes\n", n)


----------------------------------------------------------
----------------------------------------------------------
Загрузка и сохранение данных на диске    kvSaveLoad.go

    преобразования данных в поток байтов называется сериализацией
    Процесс чтения файла данных и преобразования в объект называется десериализацией
    Для сериализации и десериализации используется стандартный Go-пакет encoding/gob
    Пакет encoding/gob сохраняет данные в формате gob
    Официально такие форматы называются потоковым кодированием.

    В Go для сериализации и десериализации данных также используются такие
    пакеты, как encoding/xml, который преобразует данные в формат XML, и encoding/
    json, который сохраняет данные в формате JSON

    $ diff keyValue.go kvSaveLoad.go  // сравнение с keyValue.go из главы 4

    type myElement struct {
        Name    string
        Surname string
        Id      string
    }
    var DATA = make(map[string]myElement)
    var DATAFILE = "/tmp/dataFile.gob"

    func save() error {
        err := os.Remove(DATAFILE)
        saveTo, err := os.Create(DATAFILE)
        defer saveTo.Close()
        encoder := gob.NewEncoder(saveTo)
        err = encoder.Encode(DATA)
        return nil
    }

    func load() error {
        loadFrom, err := os.Open(DATAFILE)
        defer loadFrom.Close()
        decoder := gob.NewDecoder(loadFrom)
        decoder.Decode(&DATA)
        return nil
    }

    $ go run kvSaveLoad.go

----------------------------------------------------------
И снова пакет strings

    функции пакета strings, связанные с вводом и выводом данных в файл

    Объект strings.Reader реализует интерфейсыio.Reader, io.ReaderAt, 
    io.Seeker, io.WriterTo, io.ByteScanner и io.RuneScanner

    можно использовать strings.Reader в качестве io.Reader
    для побайтного чтения строки с помощью функции Read()

    $ go run str.go

----------------------------------------------------------
Пакет bytes    bytes.go

    пакет bytes содержит функции для работы с байтовыми срезами

    $ go run bytes.go

----------------------------------------------------------
Полномочия доступа к файлам    permissions.go

	arguments := os.Args
	if len(arguments) == 1 {
		fmt.Printf("usage: permissions filename\n")
		return
	}
	filename := arguments[1]
	info, _ := os.Stat(filename)
	mode := info.Mode()
	fmt.Println(filename, "mode is", mode.String()[1:10])

    $ go run permissions.go dataFile 


----------------------------------------------------------
----------------------------------------------------------
Обработка сигналов в UNIX

    пакет os/signal

    $ kill -l    // узнать какие есть сигналы в системе

Обработка двух сигналов    handleTwo.go.

    func handleSignal(signal os.Signal) {
        fmt.Println("handleSignal() Caught:", signal)
    }
        sigs := make(chan os.Signal, 1)
        signal.Notify(sigs, os.Interrupt, syscall.SIGINFO)
        go func() {
            for {
                sig := <-sigs
                switch sig {
                case os.Interrupt:
                    fmt.Println("Caught:", sig)
                case syscall.SIGINFO:
                    handleSignal(sig)
                    return
                }
            }
        }()

    $ go build handleTwo.go
    $ ls -l handleTwo
        -rwxr-xr-x  1 country  staff  2036578 17 янв 22:36 handleTwo
    $ ./handleTwo
        .Caught: interrupt
        .handleSignal() Caught: information request
        ...zsh: killed     ./handleTwo

    в другом терминале:
    $ ps ax | grep ./handleTwo | grep -v grep
        4288 s000  S+     0:00.01 ./handleTwo
    $ kill -s INT 4288
    $ kill -s INFO 4288
    $ kill -s USR1 4288
    $ kill -9 4288

Обработка всех сигналов    handleAll.go

    func handle(signal os.Signal) {
        fmt.Println("Received:", signal)
    }
        sigs := make(chan os.Signal, 1)
        signal.Notify(sigs)
        go func() {
            for {
                sig := <-sigs
                switch sig {
                case os.Interrupt:
                    handle(sig)
                case syscall.SIGTERM:
                    handle(sig)
                    os.Exit(0)
                case syscall.SIGUSR2:
                    fmt.Println("Handling syscall.SIGUSR2!")
                default:
                    fmt.Println("Ignoring:", sig)
                }
            }
        }()

    $ go build handleAll.go
    $ ls -l handleAll
        -rwxr-xr-x  1 country  staff  2036834 17 янв 22:49 handleAll
    $ ./handleAll
        ..Ignoring: hangup
        Ignoring: urgent I/O condition
        .Handling syscall.SIGUSR2!
        Ignoring: user defined signal 1
        .Received: interrupt
        .Received: terminated

    в другом терминале:
    $ ps ax | grep ./handleAll | grep -v grep
        4493 s000  S+     0:00.01 ./handleAll
    $ kill -s HUP 4493
    $ kill -s USR2 4493
    $ kill -s USR1 4493
    $ kill -s INT 4493
    $ kill -s TERM 4493


----------------------------------------------------------
Программирование UNIX-каналов на Go

    Для обозначения каналов UNIX используется символ |.

----------------------------------------------------------
Реализация утилиты cat(1) на Go    cat.go

    $ go run cat.go     // без аргументов скопирует стандартный ввод в ст. вывод
        Mastering Go!
        Mastering Go!
        1 2 3 4
        1 2 3 4
    $ go run cat.go dataFile | wc                                
        10      10      48


----------------------------------------------------------
Структура syscall.PtraceRegs    ptraceRegs.go

    syscall.PtraceRegs, в которой содержится информация о состоянии реестров.

    Звездой утилиты ptraceRegs.go является функция syscall.PtraceGetRegs(). 
    Для работы с реестрами существуют также функции syscall.PtraceSetRegs(), 
    syscall.PtraceAttach(), syscall.PtracePeekData() и syscall.PtracePokeData()


----------------------------------------------------------
----------------------------------------------------------
Отслеживание системных вызовов    traceSyscall.go    SYSCALLS

    $ go run traceSyscall.go    // не работает на mac
        # command-line-arguments
        ./traceSyscall.go:36:19: undefined: syscall.PtraceRegs
        ./traceSyscall.go:57:19: undefined: syscall.PtraceGetRegs
        ./traceSyscall.go:70:17: undefined: syscall.PtraceSyscall


----------------------------------------------------------
Идентификаторы пользователя и группы    ids.go

	fmt.Println("User id:", os.Getuid())

	var u *user.User
	u, _ = user.Current()
	fmt.Print("Group ids: ")
	groupIDs, _ := u.GroupIds()
	for _, i := range groupIDs {
		fmt.Print(i, " ")
	}

    $ go run ids.go


----------------------------------------------------------
----------------------------------------------------------
Docker API и Go     dockerAPI.go

    Эта утилита реализует команды docker ps и docker image ls. Первая команда
    перечисляет все запущенные контейнеры, а вторая — все доступные образы на
    локальном компьютере

    export GO111MODULE = on

    $ go run dockerAPI.go




Стр. 426
