----------------------------------------------------------
Чтение стандартного потока ввода stdIN.go

  $ go run stdIN.go
  This is number 21
  > This is number 21

----------------------------------------------------------
Работа с аргументами командной строки cla.go

  $ go run cla.go -10 0 1
  Min: -10
  Max: 1

----------------------------------------------------------
Вывод ошибок stdERR.go

  $ go run stdERR.go
  This is Standard output
  Please give me one argument!

  При применении bash(1) можно перенаправить стандартный поток ошибок в файл:
  $ go run stdERR.go 2>/tmp/stdError
  This is Standard output
  $ cat /tmp/stdError
  Please give me one argument!

  перенаправив их на устройство /dev/null
  $ go run stdERR.go 2>/dev/null
  This is Standard output

  сохранить данные стандартного потока вывода и стандартного потока ошибок в 
  одном файле, то можете перенаправить файловый дескриптор стандартного потока
  ошибок (2) в файловый дескриптор стандартного потока вывода (1).
  $ go run stdERR.go >/tmp/output 2>&1
  $ cat /tmp/output
  This is Standard output
  Please give me one argument!

  можно перенаправить и стандартный поток вывода, и стандартный
  поток ошибок на /dev/null:
  $ go run stdERR.go >/dev/null 2>&1

----------------------------------------------------------
Запись в журнальные файлы logFiles.go
Уровень журналирования: debug, info, notice, warning, err, crit, alert и emerg
Средство журналирования: auth, authpriv, cron, daemon, kern, lpr, mail, mark, 
news, syslog, user, UUCP, local0, local1, local2, local3, local4, local5, 
local6 или local7 и определяется в файле /etc/syslog.conf, /etc/rsyslog.conf 
или другом соответствующем файле, в зависимости от процесса сервера, используемого 
для ведения журнала в операционной системе на данной UNIX-машине
Серверы журналирования: UNIX: syslogd(8) и rsyslogd(8). macOS: syslogd(8)
Файл конфигурации rsyslogd(8) обычно называется rsyslog.conf и находится в /etc

  $ go run logFiles.go
  > Will you see this?
  > Broadcast message from systemd-journald@vadim (Tue 2023-05-30 17:20:41 MSK):
  > [116416]: Some program![116416]: 2023/05/30 17:20:41 LOG_MAIL: Logging in Go!

  $ grep LOG_MAIL /var/log/mail.log
  May 30 17:20:41 vadim Some program![116416]: 2023/05/30 17:20:41 LOG_MAIL: Logging in Go!

  $ grep LOG_LOCAL7 /var/log/cisco.log
  grep: /var/log/cisco.log: Нет такого файла или каталога

  $ grep LOG_ /var/log/syslog
  May 30 17:20:41 vadim logFiles[116416]: 2023/05/30 17:20:41 LOG_INFO + LOG_LOCAL7: Logging in Go!
  May 30 17:20:41 vadim Some program![116416]: 2023/05/30 17:20:41 LOG_MAIL: Logging in Go!

Функция log.Fatal() logFatal.go

  $ go run logFatal.go
  exit status 1

Функция log.Panic() logPanic.go
$ go run logPanic.go
  panic: &{17 Some program! MacBook-Pro-Country.local   {0 0} 0x1400000c108}
  goroutine 1 [running]:
  log.Panic({0x1400010df58?, 0x100c4b948?, 0x1400005e180?})
    /usr/local/go/src/log/log.go:384 +0x64
  main.main()
    /Users/country/MyProjects/Go_project/src/Mastering-Go/ch01-Go-and-OS/logPanic.go:17 +0xb8
  exit status 2

log.Fatal(), функция log.Panic() добавит запись в соответствующий файл журнала 
и немедленно прекратит работу Go-программы

----------------------------------------------------------
Запись в специальный журнальный файл customLog.go

  $ go run customLog.go
  $ cat /tmp/mGo.log
  customLog 2023/05/30 21:01:50 Hello there!
  customLog 2023/05/30 21:01:50 Another log entry!

----------------------------------------------------------
Вывод номеров строк в записях журнала customLogLineNumber.go

  $ go run customLogLineNumber.go
  $ cat /tmp/mGo.log
  customLogLineNumber 2023/05/30 21:09:04 customLogLineNumber.go:26: Hello there!
  customLogLineNumber 2023/05/30 21:09:04 customLogLineNumber.go:27: Another log entry!


----------------------------------------------------------
Обработка ошибок в Go newError.go

  $ go run newError.go
  returnError() ended normally!
  Error in returnError() function!
  !!

Не только обрабатывает сообщения об ошибках, но и создает
собственное сообщение об ошибке. errors.go

  $ go run errors.go a b c
  None of the arguments is a float!

  $ go run errors.go b c 1 2 3 c -1 100 -200 a
  Min: -200
  Max: 100

----------------------------------------------------------
Использование Docker  hw.go

Dockerfile
  FROM golang:alpine
  RUN mkdir /files
  COPY hw.go /files
  WORKDIR /files
  RUN go build -o /files/hw hw.go
  ENTRYPOINT ["/files/hw"]

  $ docker build -t go_hw:v1 .
  Sending build context to Docker daemon  22.53kB
  Step 1/6 : FROM golang:alpine
  ...
  Successfully built 69267b86fc01
  Successfully tagged go_hw:v1

Для проверки образа
  $ docker images
  EPOSITORY     TAG       IMAGE ID       CREATED         SIZE
  go_hw          v1        69267b86fc01   3 minutes ago   281MB

Выполнение образа
  $ docker run go_hw:v1
  Hello World!

Отправить образ на Docker Hub
  $ docker login
  Authenticating with existing credentials...
  Login Succeeded
  $ docker tag go_hw:v1 "mactsouk/go_hw:v1"
  $ docker push "mactsouk/go_hw:v1"

Удаление образа с UNIX машины 
$ docker rmi 69267b86fc01




