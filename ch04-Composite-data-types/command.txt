Использование составных типов данных 

----------------------------------------------------------
Структуры    sortSlice.go   structures.go

    type aStructure struct {
        person string
        height int
        weight int
    }
    var s1 aStructure
    s1.person
    p1 := aStructure{"fmt", 12, -2}  // определение литерала структуры
    p1 := aStructure{weight: 12, height: -2}   // другая форма определения литерала структуры

!!! если присвоить структуру элементу массива, эта структура
    копируется в массив, поэтому изменение значения исходной структуры
    не повлияет на объекты массива

    $ go run structures.go
    0 0
    {23 12 -2}
    {0 13 12}
    [{0 13 12} {0 0 0} {23 12 -2} {0 0 0}]
    [{0 13 12} {0 0 0} {23 12 -2} {0 0 0}]


----------------------------------------------------------
Указатели на структуры    pointerStruct.go

    $ go run pointerStruct.go
    Mihalis
    Mihalis
    Mihalis
    &{Mihalis Tsoukalos 123}
    {Mihalis Tsoukalos 123}

----------------------------------------------------------
Ключевое слово new

!!! new возвращает адрес памяти выделенного объекта. 
    Проще говоря, new возвращает указатель

    pS := new(aStructure)

!!! Основное различие между new и make состоит в том, что переменные,
    созданные с помощью make, правильно инициализируются, а не только
    обнуляется выделенная для них память. Кроме того, make можно при-
    менять только к хеш-таблицам, каналам и срезам, и эта функция не
    возвращает адрес памяти, то есть make не возвращает указатель

sP := new([]aStructure)  // создается срез, указывающий на nil
*sP = make([]aStructure, 10) // Чтобы использовать переменную sP, 
                                нужно инициализировать срез


----------------------------------------------------------
Кортежи   tuples.go

кортеж — это конечный упорядоченный список, состоящий из нескольких частей

!!! Go не поддерживает тип кортежа
    но поддерживает определенные способы использования кортежей

    func retThree(x int) (int, int, int) {
        return 2 * x, x * x, -x
    }
    n1, n2, n3 := retThree(20)
    n1, n2 = n2, n1
    x1, x2, x3 := n1*2, n1*n1, -n1

    $ go run tuples.go
    20 100 -10
    40 400 -20
    400 40 -20
    800 160000 -400


----------------------------------------------------------
----------------------------------------------------------
Регулярные выражения и сопоставление с образцом  (СМ. regexp.txt)
пакет regexp

Простой пример   selectColumn.go

    data := strings.Fields(line)  // разбивает строку на основе пробельных символов unicode.IsSpace()
    if len(data) >= column {
        fmt.Println((data[column-1]))
    }

Более сложный пример    changeDT.go   logEntries.txt

        r1 := regexp.MustCompile(`.*\[(\d\d\/\w+/\d\d\d\d:\d\d:\d\d:\d\d.*)\] .*`)
        if r1.MatchString(line) {
            match := r1.FindStringSubmatch(line)
            d1, err := time.Parse("02/Jan/2006:15:04:05 -0700", match[1])
            if err == nil {
                newFormat := d1.Format(time.Stamp)
                fmt.Print(strings.Replace(line, match[1], newFormat, 1))
            } else {
                notAMatch++
            }
            continue
        }

    regexp.MustCompile() похожа на функцию regexp.Compile(), 
        но вызывает панику, если не может проанализировать выражение

        r2 := regexp.MustCompile(`.*\[(\w+\-\d\d-\d\d:\d\d:\d\d:\d\d.*)\] .*`)
        if r2.MatchString(line) {
            match := r2.FindStringSubmatch(line)
            d1, err := time.Parse("Jan-02-06:15:04:05 -0700", match[1])
            if err == nil {
                newFormat := d1.Format(time.Stamp)
                fmt.Print(strings.Replace(line, match[1], newFormat, 1))
            } else {
                notAMatch++
            }
            continue
        }

        }
        fmt.Println(notAMatch, "lines did not match!")
    }

Проверка IPv4-адресов    findIPv4.go

    func findIP(input string) string {
        partIP := "(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])"
        grammar := partIP + "\\." + partIP + "\\." + partIP + "\\." + partIP
        matchMe := regexp.MustCompile(grammar)
        return matchMe.FindString(input)
    }

    $ go run findIPv4.go /tmp/auth.log.1 /tmp/auth.log | sort -rn | uniq -c | sort -rn
        38 xxx.zz.116.9
        33 x.zz.2.190
        25 xx.zzz.1.41
        20 178.132.1.18
        18 x.zzz.63.53
        17 178.zzz.y.9
        15 103.yyy.xxx.179
        10 213.z.yy.194
        9 yy.xx.65.113


----------------------------------------------------------
----------------------------------------------------------
Строки  (стр. 180)

    ! Строки в Go являются переменными, хранящими значения, а не указателями, как строки в C
      Строка Go — это байтовый срез, предназначенный только для чтения

    const sLiteral = "\x99\x42\x32\x55\x50\x35\x23\x50\x29\x9c"
    s2 := "€£3"

    len() - длина строковой переменной   strings.go

    go run strings.go
        ?B2UP5#P)?
        x: 9942325550352350299c
        sLiteral length: 10
        99 42 32 55 50 35 23 50 29 9c 
        q: "\x99B2UP5#P)\x9c"
        +q: "\x99B2UP5#P)\x9c"
        x: 99 42 32 55 50 35 23 50 29 9c
        s: As a string: ?B2UP5#P)?
        U+20AC '€' starts at byte position 0
        U+00A3 '£' starts at byte position 3
        U+00B3 '³' starts at byte position 5
        s2 length: 7
        s3: ab12AB
        x: 61 62 31 32 41 42
        s3 length: 6
        61 62 31 32 41 42

----------------------------------------------------------
Руны  (int32) - тип Go, который используется для представления кодовых пунктов Unicode
    runes.go

----------------------------------------------------------
Пакет unicode    unicode.go

    unicode.IsPrint() - какие части строки можно вывести с использованием рун
    unicode.IsLetter()

----------------------------------------------------------
Пакет strings    useStrings.go

    strings.ToUpper()
    strings.ToLower()
    strings.Title()
    strings.EqualFold() - являются ли две строки одинаковыми, несмотря на различия в регистре букв
    strings.HasPrefix() - true, если первая строка начинается со второй строки
    strings.HasSuffix() - true, если первая строка заканчивается второй строкой
    strings.Index()
    strings.Count() - количество, когда второй параметр появляется в строке, заданной в первом параметре
    strings.Repeat()
    strings.TrimSpace()
    strings.TrimLeft()
    strings.TrimRight()
    strings.TrimFunc()    
    strings.Compare() - сравнивает две строки лексикографически; возвращает 0, если строки идентичны
    strings.Fields() - разбивает строку на части, используя для разделения пробельные символы
    strings.Split() - разбить заданную строку на части, ограниченные строкой-разделителем
    strings.Replace() - Первый параметр — это строка, которую следует обработать. 
                        Второй параметр содержит строку, которая, если будет найдена, 
                        заменится на третий параметр функции. 
                        Последний параметр — это максимальное количество замен, которые можно выполнить. 
                        Если этот параметр меньше нуля, то количество возможных замен не ограничено
    strings.Join()
    strings.SplitAfter() - разбивает строку, переданную в качестве первого параметра, на подстроки 
                            на основе строки-разделителя, заданной в качестве второго параметра


----------------------------------------------------------
----------------------------------------------------------
Оператор switch    switch.go

    ! в switch можно использовать регулярные выражения
    ! последовательность вариантов в блоке switch имеет значение

    switch asString {
    case "1":
        fmt.Println("One!")
    case "0":
        fmt.Println("Zero!")
    default:
        fmt.Println("Do not care!")
    }

    switch {
    case number < 0:
        fmt.Println("Less than zero!")
    case number > 0:
        fmt.Println("Bigger than zero!")
    default:
        fmt.Println("Zero!")
    }

    var negative = regexp.MustCompile(`-`)
    var floatingPoint = regexp.MustCompile(`\d?\.\d`)
    var email = regexp.MustCompile(`^[^@]+@[^@.]+\.[^@.]+`)
    switch {
    case negative.MatchString(asString):
        fmt.Println("Negative number")
    case floatingPoint.MatchString(asString):
        fmt.Println("Floating point!")
    case email.MatchString(asString):
        fmt.Println("It is an email!")
        fallthrough  // - выполняет ветвь, которая следует за текущей
    default:
        fmt.Println("Something else!")
    }

    var aType error = nil
    switch aType.(type) {
    case nil:
        fmt.Println("It is nil interface!")
    default:
        fmt.Println("Not nil interface!")
    }


----------------------------------------------------------
----------------------------------------------------------
Вычисление числа π с высокой точностью

    Программа вычисления числа π по формуле Белларда    calculatePi.go
    пакеты "math", "math/big"


----------------------------------------------------------
----------------------------------------------------------
Разработка на Go хранилища типа «ключ — значение»    keyValue.go


----------------------------------------------------------
----------------------------------------------------------
Go и формат JSON

    пакет encoding/json

Чтение данных из формата JSON    readJSON.go

    json.NewDecoder(), чтобы создать новый декодер JSON, связанный с файлом
    Decode(), чтобы декодировать содержимое файла и поместить его в нужную структуру данных

    decodeJSON := json.NewDecoder(in)
    err = decodeJSON.Decode(key)

Сохранение данных в формате JSON    writeJSON.go

    encodeJSON := json.NewEncoder(filename) - переменная связана с именем файла, в который будут помещаться данные
    err := encodeJSON.Encode(key) - кодирует данные и сохраняет их в нужный файл

Использование функций Marshal() и Unmarshal()    mUJSON.go

    rec, err := json.Marshal(&myRecord) - принимает ссылку на переменную, которая преобразуется в формат JSON

    err1 := json.Unmarshal(rec, &unRec) - получает входные данные JSON и преобразует их в структуру Go

----------------------------------------------------------
Синтаксический анализ данных в формате JSON    parsingJSON.go

    ! неструктурированные данные JSON помещаются
      не в структуры, а в хеш-таблицы Go

    fileData, err := ioutil.ReadFile(filename)  - позволяет прочитать сразу весь файл
    var parsedData map[string]interface{}  - определена хеш-таблица
    json.Unmarshal([]byte(fileData), &parsedData) - поместить содержимое файла в хеш-таблицу parsedData
    for key, value := range parsedData {
        fmt.Println("key:", key, "value:", value)
    }

    $ go run parsingJSON.go noStr.json
        key: Tel value: [map[Mobile:true Number:1234-567] map[Mobile:true
        Number:1234-abcd] map[Mobile:false Number:abcc-567]]
        key: Name value: John
        key: Surname value: Doe
        key: Age value: 25
        key: Parents value: [Jim Mary]
    Обратите внимание: как видно из результатов работы программы, ключи хеш-
    таблицы выводятся в случайном порядке


----------------------------------------------------------
----------------------------------------------------------
Go и XML    rwXML.go

    xmlData, _ := xml.MarshalIndent(myRecord, "", "     ")  - данные преобразованы в формат XML
    xmlData = []byte(xml.Header + string(xmlData)) - добавлен заголовок
    fmt.Println("\nxmlData:", string(xmlData))

    $ go run rwXML.go readMe.json

Чтение XML-файла    readXML.go

    decodeXML := xml.NewDecoder(in)
    err = decodeXML.Decode(key)
    ...
    var myRecord Record
    err := loadFromXML(filename, &myRecord)

    $ go run readXML.go data.xml

Настройка вывода данных в формате XML    modXML.go
    $ go run modXML.go


----------------------------------------------------------
----------------------------------------------------------
Go и формат YAML
    Формат YAML поддерживается пакетом Viper


