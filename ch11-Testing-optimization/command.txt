Тестирование, оптимизация и профилирование кода

----------------------------------------------------------
Оптимизация кода Go

----------------------------------------------------------
----------------------------------------------------------
Профилирование кода Go

    стандартный Go пакет runtime/pprof - низкого уровня

    $ go tool pprof -help

    Стандартный Go-пакет net/http/pprof - выскокого уровня

----------------------------------------------------------
Простой пример профилирования    profileMe.go

    Вызов pprof.StartCPUProfile() начинает профилирование процессора для программы, 
    а вызов pprof.StopCPUProfile() останавливает его.
    Если вы хотите многократно создавать и использовать временные файлы и каталоги, 
    обратите внимание на функции ioutil.TempFile() и ioutil.TempDir() соответственно

    pprof.WriteHeapProfile(memory)

    $ go run profileMe.go

    $ go tool pprof /tmp/cpuProfile.out   // запустить профилировщик
        help  // помощь, список команд
        top   // возвращает десять лучших записей в текстовой форме
        top10 --cum  // возвращает совокупное время выполнения для каждой функции
        list main.N1  // что происходит с каждой отдельной функцией
        pdf //  создать PDF-файл данных профилирования, понадобится программа Graphviz

----------------------------------------------------------
Удобный внешний пакет для профилирования    betterProfile.go

    github.com/pkg/profile

    $ go mod init bestProfile 
    $ go get github.com/pkg/profile

    defer profile.Start(profile.ProfilePath("/tmp")).Stop()
    defer profile.Start(profile.MemProfile).Stop()          // для профилирования памяти

    $ go run betterProfile.go
    $ go tool pprof /tmp/cpu.pprof

----------------------------------------------------------
Веб-интерфейс Go-профилировщика

    MacOS:
    Чтобы пользовательский веб-интерфейс смог работать, необходимо установить Graphviz
    https://www.macports.org/install.php скачать MacPorts-2.9.1-14-Sonoma.pkg и установить
    перезагрузить
    $ sudo port install graphviz

    Ubuntu:
    $ sudo apt install graphviz

    Интерактивный профилировщик Go запускается с помощью такой команды:
    $ go tool pprof -http=[host]:[port] aProfile

----------------------------------------------------------
Пример профилирования с использованием веб-интерфейса

    $ go run profileMe.go

    $ go tool pprof -http=localhost:8080 /tmp/cpuProfile.out
        Serving web UI on http://localhost:8080

    открыватся браузер http://localhost:8080/ui/

----------------------------------------------------------
Коротко об основах Graphviz    graph.dot

    $ dot -T png graph.dot -o graph.png


----------------------------------------------------------
----------------------------------------------------------
Утилита go tool trace    goGC.go

    go tool trace — это средство просмотра файлов трассировки, которые
    можно сгенерировать одним из трех способов:
     с помощью пакета runtime/trace;
     с помощью пакета net/http/pprof;
     с помощью команды go test -trace

    $ go doc runtime/trace

    f, err := os.Create("/tmp/traceFile.out")
    defer f.Close()
    err = trace.Start(f)
    defer trace.Stop()

    $ go run goGC.go
    $ go tool trace /tmp/traceFile.out


----------------------------------------------------------
----------------------------------------------------------
Тестирование кода Go

    ф-ции тесторования содержаться в файлах, заканчивающихся на _test.go 
    Функция тестирования начинается с Test
    стандартный Go-пакет testing
    подкоманда go test

----------------------------------------------------------
Написание тестов для существующего кода Go    testMe.go  testMe_test.go

    $ go test testMe.go testMe_test.go -v
    параметр -v дает расширенный вывод
    запустить тест несколько раз подряд параметр -count
    $ go test testMe.go testMe_test.go -count 2
    только некоторые тесты параметр -run
    $ go test testMe.go testMe_test.go -run='F2' -v

----------------------------------------------------------
Тестовое покрытие кода    cover/codeCover.go  codeCover_test.go

    $ cd cover 
    $ go test -cover -v
        для -cover не требуется флаг -v

    $ go test -coverprofile=coverage.out
    $ go tool cover -func=coverage.out
    $ go tool cover -html=coverage.out    // исп. браузер для анализа файла
    $ go tool cover -html=coverage.out -o output.html  // сохранить html отчет


----------------------------------------------------------
----------------------------------------------------------
Тестирование HTTP-сервера с базой данных    webServer.go webServer_test.go

    $ go get github.com/lib/pq   // загрузить пакет для работы с PostgreSQL из Go

    установка PostgreSQL на Ubuntu:
    sudo sh -c 'echo "deb https://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
    wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
    sudo apt-get update
    sudo apt-get -y install postgresql

    установка графической оболочки для работы с PostgreSQL:
    sudo apt  install curl
    curl -fsS https://www.pgadmin.org/static/packages_pgadmin_org.pub | sudo gpg --dearmor -o /usr/share/keyrings/packages-pgadmin-org.gpg
    sudo sh -c 'echo "deb [signed-by=/usr/share/keyrings/packages-pgadmin-org.gpg] https://ftp.postgresql.org/pub/pgadmin/pgadmin4/apt/$(lsb_release -cs) pgadmin4 main" > /etc/apt/sources.list.d/pgadmin4.list && apt update'
    sudo apt install pgadmin4




    создать базу данных PostgreSQL с именем s2
    $ psql -p 5432 -h localhost -U postgres -c "CREATE DATABASE s2" CREATE DATABASE












Стр. 528